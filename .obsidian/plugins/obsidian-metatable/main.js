/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    expansionMode: 'expanded',
    ignoreNulls: false,
    nullValue: '',
    searchFn: null,
    skipKey: 'metatable',
    ignoredKeys: ['metatable', 'frontmatter'],
    autolinks: false,
    vault: null,
};
class MetatableSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl, plugin } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Metatable Settings' });
        new obsidian.Setting(containerEl)
            .setName('Expansion level')
            .setDesc('Level of expansion of the metatable tree')
            .addDropdown(drop => drop
            .addOption('expanded', 'Fully expanded')
            .addOption('leaf-collapsed', 'Collapse leafs')
            .addOption('all-collapsed', 'Collapse all')
            .setValue(plugin.settings.expansionMode)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            plugin.settings.expansionMode = value;
            yield plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Ignore null values')
            .setDesc('Ignore any member with a null value.')
            .addToggle(setting => setting
            .setValue(plugin.settings.ignoreNulls)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            plugin.settings.ignoreNulls = value;
            yield plugin.saveSettings();
            this.display();
        })));
        if (!plugin.settings.ignoreNulls) {
            new obsidian.Setting(containerEl)
                .setName('Null value')
                .setDesc('Text to show when a key has no value. Defaults to nothing')
                .addText(text => text
                .setValue(plugin.settings.nullValue)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                plugin.settings.nullValue = value;
                yield plugin.saveSettings();
            })));
        }
        new obsidian.Setting(containerEl)
            .setName('Skip key')
            .setDesc('When this key is found and `true`, the metatable will not be displayed')
            .addText(text => text
            .setValue(plugin.settings.skipKey)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            plugin.settings.skipKey = value;
            yield plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Ignored keys')
            .setDesc('Any key found in this comma-separated list will be ignored whilst displaying the metatable')
            .addText(text => text
            .setValue(plugin.settings.ignoredKeys.join(', '))
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            plugin.settings.ignoredKeys = value.split(',').map(v => v.trim());
            yield plugin.saveSettings();
        })));
        containerEl.createEl('h3', { text: 'Experimental' });
        new obsidian.Setting(containerEl)
            .setName('Autolink')
            .setDesc('Enables autolinks for wikilinks `[[target]]`, frontmatter links `%target%` and local links `./deep/target`')
            .addToggle(setting => setting
            .setValue(plugin.settings.autolinks)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            plugin.settings.autolinks = value;
            yield plugin.saveSettings();
        })));
    }
}

/**
 * A store of rules to apply to set members.
 *
 * Only one rule can be assigned to a member. If you add two rules against the
 * same member key it will only keep the last one.
 *
 * ## Example
 *
 * ```
 * const rules = new RuleStore()
 * const tagsRule = { toHtml: tagslist, foldable: false }
 * rules.set('tags', tagsRule)
 * ```
 */
class RuleStore extends Map {
}

function isEmptyArray(value) {
    if (typeof value === 'string') {
        return value === '[]';
    }
    if (Array.isArray(value) && value.length === 0) {
        return true;
    }
    return false;
}

function toggle(trigger) {
    const isExpanded = trigger.getAttribute('aria-expanded') == 'true';
    trigger.setAttribute('aria-expanded', String(!isExpanded));
}
function clickHandler(event, searchFn) {
    const trigger = event.target;
    if (trigger === null || trigger === void 0 ? void 0 : trigger.hasAttribute('aria-expanded')) {
        event.stopPropagation();
        event.preventDefault();
        toggle(trigger);
        return;
    }
    if (trigger === null || trigger === void 0 ? void 0 : trigger.hasAttribute('href')) {
        event.stopPropagation();
        const href = trigger.getAttribute('href');
        if (trigger.hasClass('tag')) {
            event.preventDefault();
            searchFn(`tag:${href}`);
        }
    }
}
function keyHandler(event) {
    const trigger = event.target;
    if ((event.code == 'Space' || event.code == 'Enter') && (trigger === null || trigger === void 0 ? void 0 : trigger.hasAttribute('aria-expanded'))) {
        event.stopPropagation();
        event.preventDefault();
        toggle(trigger);
    }
}
function externalLink(value) {
    const a = document.createElement('a');
    a.classList.add('external-link');
    a.setAttribute('target', '_blank');
    a.setAttribute('rel', 'noopener');
    a.setAttribute('href', value);
    a.append(value);
    return a;
}
function obsidianUrl(vaultName, fileName) {
    return `obsidian://open?vault=${vaultName}&file=${encodeURI(obsidian.getLinkpath(fileName))}`;
}
function internalLink(url) {
    const a = document.createElement('a');
    const value = url.toString();
    const label = url.searchParams.get('file');
    a.dataset.href = value;
    a.setAttribute('href', value);
    a.classList.add('internal-link');
    a.setAttribute('target', '_blank');
    a.setAttribute('rel', 'noopener');
    a.append(label);
    return a;
}
/**
/* Creates a link for internal links from a string of the form `[[text]]`.
 */
function wikiLink(value, vaultName) {
    const cleanValue = value.slice(2, -2);
    const url = new URL(obsidianUrl(vaultName, cleanValue));
    return internalLink(url);
}
/**
/* Creates a link for internal links from a string of the form `%text%`.
 */
function frontmatterLink(value, vaultName) {
    const cleanValue = value.slice(1, -1);
    const url = new URL(obsidianUrl(vaultName, cleanValue));
    return internalLink(url);
}
/**
 * Creates a link for local paths.
 */
function localLink(value, vaultName) {
    const url = new URL(obsidianUrl(vaultName, value));
    return internalLink(url);
}
function isOpen(mode, depth) {
    if (mode == 'expanded') {
        return true;
    }
    // Keep the root open when leafs are collapsed
    if (mode == 'leaf-collapsed' && depth == 0) {
        return true;
    }
    // all-collapsed
    return false;
}
function isObsidianUrl(url) {
    return (url instanceof URL && url.protocol == 'obsidian:');
}
function isUrl(url) {
    const allowedProtocols = ['http:', 'https:', 'evernote:'];
    return (url instanceof URL && allowedProtocols.some(protocol => url.protocol == protocol));
}
function isLocalLink(value) {
    return value.startsWith('./');
}
function tryUrl(value) {
    try {
        return new URL(value);
    }
    catch (_) {
    }
}
function isWikiLink(value) {
    return (value.startsWith('[[') && value.endsWith(']]'));
}
function isFrontmatterLink(value) {
    return (value.startsWith('%') && value.endsWith('%'));
}
function enrichValue(value, context) {
    const { settings, vaultName } = context;
    const { autolinks } = settings;
    const cleanValue = value.toString().trim();
    if (autolinks) {
        if (isWikiLink(cleanValue)) {
            return wikiLink(cleanValue, vaultName);
        }
        if (isFrontmatterLink(cleanValue)) {
            return frontmatterLink(cleanValue, vaultName);
        }
        if (isLocalLink(cleanValue)) {
            return localLink(cleanValue, vaultName);
        }
    }
    const url = tryUrl(cleanValue);
    if (isObsidianUrl(url)) {
        return internalLink(url);
    }
    if (isUrl(url)) {
        return externalLink(cleanValue);
    }
    return value.toString();
}
function isNully(value) {
    if (typeof value == 'string') {
        return value.length == 0;
    }
    return value == null;
}
/**
 * A set member with a scalar value.
 */
function leafMember(label, data, context) {
    const { rules, settings } = context;
    const root = document.createElement('tr');
    const key = document.createElement('th');
    const value = document.createElement('td');
    const rule = rules.get(label);
    const datum = (rules.has(label) && !isNully(data))
        ? rule.toHtml(data, rule)
        : enrichValue(data, context);
    key.classList.add('key');
    key.append(label);
    value.classList.add('value');
    value.append(datum);
    root.classList.add('member');
    root.append(key);
    root.append(value);
    return root;
}
/**
 * A set member with a complex value.
 */
function nodeMember(label, value, context) {
    const root = details(label, value, Object.assign(Object.assign({}, context), { depth: context.depth + 1 }));
    root.classList.add('member');
    return root;
}
/**
 * A set member.
 */
function member(label, value, context) {
    const { settings } = context;
    const patchedValue = value == null ? settings.nullValue : value;
    if (typeof patchedValue == 'object') {
        return nodeMember(label, value, context);
    }
    return leafMember(label, patchedValue, context);
}
/**
 * A set of members.
 */
function set(data, context) {
    const { settings, depth } = context;
    const { ignoredKeys, ignoreNulls } = settings;
    const valueContext = Object.assign(Object.assign({}, context), { depth: depth + 1 });
    const root = document.createElement('table');
    root.classList.add('set');
    Object.entries(data).forEach(([label, value]) => {
        if (ignoreNulls && (value == null || isEmptyArray(value)))
            return;
        if (ignoredKeys.some(key => key == label))
            return;
        root.append(member(label, value, valueContext));
    });
    return root;
}
/**
 * A list of members.
 */
function list(data, context) {
    const { settings, depth } = context;
    const valueContext = Object.assign(Object.assign({}, context), { depth: depth + 1 });
    const root = document.createElement('ul');
    data.forEach((item) => {
        let value;
        const li = document.createElement('li');
        if (Array.isArray(item)) {
            value = list(item, valueContext);
        }
        else if (typeof item == 'object') {
            value = set(item, valueContext);
        }
        else {
            value = enrichValue(item, valueContext);
        }
        li.append(value);
        root.append(li);
    });
    return root;
}
function ordinaryValue(data, context) {
    return Array.isArray(data)
        ? list(data, context)
        : set(data, context);
}
/**
 * A collapsible group.
 */
function details(label, data, context) {
    const { settings, rules, depth } = context;
    const { mode } = settings;
    const root = document.createElement('tr');
    const key = document.createElement('th');
    const value = document.createElement('td');
    const rule = rules.get(label);
    const valueId = `${label}-${depth}`;
    const datum = (rules.has(label) && !isNully(data))
        ? rule.toHtml(data, rule)
        : ordinaryValue(data, Object.assign(Object.assign({}, context), { depth: depth + 1 }));
    key.classList.add('key');
    key.append(label);
    root.append(key);
    value.classList.add('value');
    value.setAttribute('id', valueId);
    value.append(datum);
    root.append(value);
    if (rule == undefined || rule.foldable) {
        const marker = document.createElement('div');
        key.classList.add('toggle');
        key.setAttribute('role', 'button');
        key.setAttribute('aria-expanded', String(isOpen(mode, depth)));
        key.setAttribute('aria-controls', valueId);
        key.setAttribute('tabindex', '0');
        marker.classList.add('marker');
        value.append(marker);
    }
    return root;
}
function sheath(data, context) {
    const { settings } = context;
    const root = document.createElement('details');
    const summary = document.createElement('summary');
    const value = set(data, context);
    if (isOpen(settings.mode, 0)) {
        root.setAttribute('open', '');
    }
    summary.append('Metadata');
    root.classList.add('metatable');
    root.append(summary);
    root.append(value);
    return root;
}
function metatable(data, context) {
    const { searchFn, settings } = context;
    const fragment = new DocumentFragment();
    const root = sheath(data, context);
    root.addEventListener('click', (e) => clickHandler(e, searchFn));
    root.addEventListener('keydown', keyHandler);
    fragment.append(root);
    return fragment;
}

/**
 * Transforms a list of dirty tags into HTML.
 */
function taglist(data, rule) {
    const list = normaliseTags(data);
    // No valid tags found.
    if (list.length == 0)
        return null;
    const root = document.createElement('ul');
    root.classList.add('tag-list');
    list.forEach((item) => {
        const li = document.createElement('li');
        const value = tag(item);
        li.append(value);
        root.append(li);
    });
    return root;
}
/**
 * Normalises a list of tags as an array of strings.
 */
function normaliseTags(data) {
    if (data == null) {
        return [];
    }
    if (typeof data == 'string') {
        return data.split(',').map(x => x.trim()).filter(x => x && x.length != 0);
    }
    return data.filter(x => x && x.length != 0);
}
function tag(value) {
    var _a, _b;
    const a = document.createElement('a');
    a.classList.add('tag');
    // XXX: Note that `part` is an `Element` extension in draft. Checking for
    // undefined lets us get away with plain jest dom testing.
    // @ts-ignore
    (_a = a.part) === null || _a === void 0 ? void 0 : _a.add('tag');
    // @ts-ignore
    (_b = a.part) === null || _b === void 0 ? void 0 : _b.add(encodeURI(value));
    a.setAttribute('target', '_blank');
    a.setAttribute('rel', 'noopener');
    a.setAttribute('href', `#${value}`);
    a.append(`${value}`);
    return a;
}

var styles = ":host-context(.theme-light) {\n  --metatable-foreground: var(--text-muted, darkslategrey);\n  --metatable-key-background: var(--background-primary-alt, #f3f3f3);\n  --metatable-key-border-color: var(--background-modifier-border, lightgrey);\n  --metatable-key-border-color-focus: orange;\n  --metatable-key-focus: var(--background-match-highlight, lightyellow);\n  --metatable-tag-background: var(--background-primary-alt, #f3f3f3);\n  --metatable-link-color: var(--text-accent, #705dcf);\n  --metatable-link-color-hover: var(--text-accent-hover, #8875ff);\n}\n\n:host-context(.theme-dark) {\n  --metatable-foreground: var(--text-muted, #999);\n  --metatable-key-background: var(--background-primary-alt, #111);\n  --metatable-key-border-color: var(--background-modifier-border, #333);\n  --metatable-key-border-color-focus: orange;\n  --metatable-key-focus: black;\n  --metatable-tag-background: var(--background-primary-alt, #111);\n  --metatable-link-color: var(--text-accent, #705dcf);\n  --metatable-link-color-hover: var(--text-accent-hover, #8875ff);\n}\n\n:host {\n  --metatable-collapsed-symbol: \"▶︎\";\n  --metatable-expanded-symbol: \"▼\";\n  --metatable-font-family: var(--text, sans-serif);\n  --metatable-font-size: var(--font-small, 13px);\n  --metatable-key-border-width: 2px;\n  --metatable-key-min-width: 150px;\n  --metatable-mark-symbol: \"…\";\n  --metatable-value-background: transparent;\n  --metatable-background: transparent;\n  --metatable-tag-symbol: \"\";\n  --metatable-external-link-icon: url(app://obsidian.md/public/images/874d8b8e340f75575caa.svg);\n  --metatable-external-link-color: var(--metatable-link-color);\n  --metatable-external-link-color-hover: var(--metatable-link-color-hover);\n  --metatable-internal-link-icon: none;\n  --metatable-internal-link-color: var(--metatable-link-color);\n  --metatable-internal-link-color-hover: var(--metatable-link-color-hover);\n}\n\n\n* {\n  box-sizing: border-box;\n}\n\ndetails {\n  background-color: var(--metatable-background);\n  color: var(--metatable-foreground);\n  font-family: var(--metatable-font-family);\n  font-size: var(--metatable-font-size);\n}\n\nsummary {\n  cursor: pointer;\n}\n\nsummary:focus {\n  outline: none;\n}\n\nsummary:focus-visible {\n  outline: none;\n  background-color: var(--metatable-key-focus)\n}\n\n.set {\n  background-color: var(--metatable-background);\n  display: grid;\n  grid-gap: 2px;\n  margin-top: 0.4rem;\n}\n\n.member {\n  display: grid;\n  grid-gap: 2px;\n  grid-template-columns: minmax(0, 1fr) minmax(0, 4fr);\n  grid-template-areas: \"key value\";\n}\n\n.key[role=button] {\n  cursor: pointer;\n}\n\n.member .key {\n  background-color: var(--metatable-key-background);\n  border-right: var(--metatable-key-border-width) solid var(--metatable-key-border-color);\n  display: block;\n  font-weight: bold;\n  grid-area: key;\n  padding: 0.4rem;\n  text-align: left;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: var(--metatable-key-min-width);\n}\n\n.member .value {\n  background-color: var(--metatable-value-background);\n  grid-area: value;\n  margin: 0;\n  padding: 0.4rem;\n}\n\n.member .key:focus {\n  outline: none;\n}\n\n.member .key:focus-visible {\n  outline: none;\n  border-right-color: var(--metatable-key-border-color-focus);\n  background-color: var(--metatable-key-focus);\n}\n\n.value ul {\n  margin: 0;\n  padding: 0;\n}\n\n.value li {\n  margin-left: 1rem;\n}\n\n.key[aria-expanded]::before {\n  margin-right: 0.3rem;\n  font-size: 0.6rem;\n}\n\n.key[aria-expanded=true]::before {\n  content: var(--metatable-expanded-symbol);\n}\n\n.key[aria-expanded=false]::before {\n  content: var(--metatable-collapsed-symbol);\n}\n\n.key[aria-expanded=false] + .value > :first-child {\n  display: none;\n}\n\n.key[aria-expanded=false] + .value > .marker::after {\n  content: var(--metatable-mark-symbol);\n  display: block;\n  padding: 0.4rem;\n}\n\n/* Mappers */\n\n.tag-list li {\n  display: inline-block;\n  margin: 0 0.4rem 0 0;\n}\n\n.tag {\n  background-color: var(--metatable-tag-background);\n  border-radius: 1rem;\n  color: var(--metatable-foreground);\n  display: inline-block;\n  padding: 0.1rem 0.6rem;\n  text-decoration: none;\n}\n\n.tag::before {\n  content: var(--metatable-tag-symbol);\n}\n\n.tag:hover {\n  filter: brightness(0.8);\n}\n\n.tag:focus, .external-link:focus, .internal-link:focus {\n  outline: none;\n}\n\n.tag:focus-visible, .external-link:focus-visible, .internal-link:focus-visible {\n  outline: none;\n  background-color: var(--metatable-key-focus)\n}\n\n.external-link {\n  color: var(--metatable-external-link-color);\n  display: inline-block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 450px;\n  white-space: nowrap;\n}\n\n.external-link::after {\n  content: var(--metatable-external-link-icon);\n  display: inline-block;\n  margin-left: 0.3rem;\n  vertical-align: sub;\n}\n\n.external-link:hover {\n  color: var(--metatable-external-link-color-hover);\n}\n\n.internal-link {\n  color: var(--metatable-internal-link-color);\n  display: inline-block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 450px;\n  white-space: nowrap;\n}\n\n.internal-link::after {\n  content: var(--metatable-internal-link-icon);\n  display: inline-block;\n  margin-left: 0.3rem;\n  vertical-align: sub;\n}\n\n.internal-link:hover {\n  color: var(--metatable-internal-link-color-hover);\n}\n";

function log(msg) {
    console.log(`metatable: ${msg}`);
}
function createMetatable(el, data, context) {
    const wrapper = el.createEl('div');
    wrapper.classList.add('obsidian-metatable');
    wrapper.attachShadow({ mode: 'open' });
    const fragment = new DocumentFragment();
    fragment.createEl('style', { text: styles });
    fragment.append(metatable(data, context));
    wrapper.shadowRoot.append(fragment);
}
function isEmpty(data, ignoredKeys) {
    return Object.entries(data)
        .filter(([key, value]) => !(ignoredKeys.some(x => x == key)))
        .every(([_, value]) => value == null || isEmptyArray(value));
}
function frontmatterProcessor(el, ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        const plugin = this;
        const frontmatter = yield el.querySelector('.frontmatter');
        if (frontmatter !== null) {
            const target = el.querySelector('.frontmatter-container');
            target.removeAttribute('class');
            // Prevents an undesired `display: none` if `tags` is not present.
            target.removeAttribute('style');
            target.empty();
            // @ts-ignore
            const searchFn = plugin.app.internalPlugins.getPluginById('global-search').instance.openGlobalSearch.bind(plugin);
            const { ignoreNulls, ignoredKeys, skipKey } = plugin.settings;
            const rules = new RuleStore();
            rules.set('tags', {
                toHtml: taglist,
                foldable: false,
            });
            const context = {
                vaultName: plugin.app.vault.getName(),
                rules,
                searchFn,
                settings: {
                    mode: plugin.settings.expansionMode,
                    ignoreNulls,
                    nullValue: plugin.settings.nullValue,
                    ignoredKeys,
                    autolinks: plugin.settings.autolinks,
                },
                depth: 0,
            };
            if (ctx.frontmatter) {
                if (ctx.frontmatter[skipKey]) {
                    return;
                }
                // Nothing to render if all top-level are null and nulls should be
                // ignored.
                if (ignoreNulls && isEmpty(ctx.frontmatter, ignoredKeys)) {
                    return;
                }
                createMetatable(target, ctx.frontmatter, context);
            }
        }
    });
}
class MetatablePlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.registerMarkdownPostProcessor(frontmatterProcessor.bind(this));
            this.addSettingTab(new MetatableSettingTab(this.app, this));
            log('loaded');
        });
    }
    onunload() {
        log('unloaded');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = MetatablePlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsInNyYy9zZXR0aW5ncy50cyIsInNyYy9ydWxlLnRzIiwic3JjL3V0aWxzLnRzIiwic3JjL3RhYmxlLnRzIiwic3JjL21hcHBlcnMudHMiLCJzcmMvcGx1Z2luLnRzIl0sInNvdXJjZXNDb250ZW50IjpudWxsLCJuYW1lcyI6WyJQbHVnaW5TZXR0aW5nVGFiIiwiU2V0dGluZyIsImdldExpbmtwYXRoIiwiUGx1Z2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdURBO0FBQ08sU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFO0FBQzdELElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFD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
