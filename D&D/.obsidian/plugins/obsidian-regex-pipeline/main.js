/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class RegexPipeline extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.pathToRulesets = this.app.vault.configDir + "/regex-rulesets";
        this.pathToIndex = this.app.vault.configDir + "/regex-rulesets/index.txt";
    }
    log(message, ...optionalParams) {
        // comment this to disable logging
        console.log("[regex-pipeline] " + message);
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            this.log('loading');
            this.menu = new ApplyRuleSetMenu(this.app, this);
            this.menu.contentEl.className = "rulesets-menu-content";
            this.menu.titleEl.className = "rulesets-menu-title";
            this.addRibbonIcon('dice', 'Regex Rulesets', () => {
                this.menu.open();
            });
            this.addCommand({
                id: 'apply-ruleset',
                name: 'Apply Ruleset',
                // callback: () => {
                // 	this.log('Simple Callback');
                // },
                checkCallback: (checking) => {
                    let leaf = this.app.workspace.activeLeaf;
                    if (leaf) {
                        if (!checking) {
                            this.menu.open();
                        }
                        return true;
                    }
                    return false;
                }
            });
            this.reloadRulesets();
            this.log("Rulesets: " + this.pathToRulesets);
            this.log("Index: " + this.pathToIndex);
        });
    }
    onunload() {
        this.log('unloading');
    }
    reloadRulesets() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield this.app.vault.adapter.exists(this.pathToRulesets)))
                yield this.app.vault.createFolder(this.pathToRulesets);
            if (!(yield this.app.vault.adapter.exists(this.pathToIndex)))
                yield this.app.vault.adapter.write(this.pathToIndex, "").catch((r) => {
                    new obsidian.Notice("Failed to write to index file: " + r);
                });
            let p = this.app.vault.adapter.read(this.pathToIndex);
            p.then(s => {
                this.rules = s.split(/\r\n|\r|\n/);
                this.rules = this.rules.filter((v) => v.length > 0);
                this.log(this.rules);
            });
        });
    }
    appendRulesetsToIndex(name) {
        return __awaiter(this, void 0, void 0, function* () {
            var result = true;
            this.rules.push(name);
            var newIndexValue = "";
            this.rules.forEach((v, i, all) => {
                newIndexValue += v + "\n";
            });
            yield this.app.vault.adapter.write(this.pathToIndex, newIndexValue).catch((r) => {
                new obsidian.Notice("Failed to write to index file: " + r);
                result = false;
            });
            return result;
        });
    }
    createRuleset(name, content) {
        return __awaiter(this, void 0, void 0, function* () {
            this.log("createRuleset: " + name);
            var path = this.pathToRulesets + "/" + name;
            if (yield this.app.vault.adapter.exists(path)) {
                this.log("file existed: " + path);
                return false;
            }
            yield this.app.vault.adapter.write(path, content).catch((r) => {
                new obsidian.Notice("Failed to write the ruleset file: " + r);
            });
            yield this.appendRulesetsToIndex(name);
            return true;
        });
    }
    applyRuleset(ruleset) {
        return __awaiter(this, void 0, void 0, function* () {
            this.log("applyRuleset: " + ruleset);
            let ruleParser = /^"(.+?)"([a-z]?)->"(.+?)"([a-z]?)\n?$/gmus;
            let ruleText = yield this.app.vault.adapter.read(ruleset);
            let activeMarkdownView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
            if (activeMarkdownView == null) {
                new obsidian.Notice("No active Markdown file!");
                return;
            }
            let subject;
            let selectionMode;
            if (activeMarkdownView.editor.somethingSelected()) {
                subject = activeMarkdownView.editor.getSelection();
                selectionMode = true;
            }
            else {
                subject = activeMarkdownView.editor.getValue();
            }
            let count = 0;
            let ruleMatches;
            while (ruleMatches = ruleParser.exec(ruleText)) {
                if (ruleMatches == null)
                    break;
                this.log("\n" + ruleMatches[1] + "\n↓↓↓↓↓\n" + ruleMatches[3]);
                let matchRule = ruleMatches[2].length == 0 ? new RegExp(ruleMatches[1], 'gm') : new RegExp(ruleMatches[1], ruleMatches[2]);
                if (ruleMatches[4] == 'x')
                    subject = subject.replace(matchRule, '');
                else
                    subject = subject.replace(matchRule, ruleMatches[3]);
                count++;
            }
            if (selectionMode)
                activeMarkdownView.editor.replaceSelection(subject);
            else
                activeMarkdownView.editor.setValue(subject);
            activeMarkdownView.requestSave();
            new obsidian.Notice("Applied " + count + " regex replacements!");
        });
    }
}
class ApplyRuleSetMenu extends obsidian.Modal {
    constructor(app, plugin) {
        super(app);
        this.plugin = plugin;
        this.titleEl.append(this.titleEl.createEl("h1", null, el => {
            el.innerHTML = this.plugin.pathToRulesets + "/...";
            el.style.setProperty("display", "inline-block");
            el.style.setProperty("width", "92%");
            el.style.setProperty("max-width", "480px");
            el.style.setProperty("margin", "12 0 8");
        }));
        // var reloadButton = new ButtonComponent(this.titleEl)
        // 	.setButtonText("RELOAD")
        // 	.onClick(async (evt) => {
        // 		this.plugin.reloadRulesets();
        // 		this.onClose();
        // 		this.onOpen();
        // 	});
        // reloadButton.buttonEl.style.setProperty("display", "inline-block")
        // reloadButton.buttonEl.style.setProperty("float", "right")
        // reloadButton.buttonEl.style.setProperty("bottom", "8px")
        // reloadButton.buttonEl.style.setProperty("margin", "auto")
    }
    onOpen() {
        for (let i = 0; i < this.plugin.rules.length; i++) {
            // new Setting(contentEl)
            // 	.setName(this.plugin.rules[i])
            // 	.addButton(btn => btn.onClick(async () => {
            // 		this.plugin.applyRuleset(this.plugin.pathToRulesets + "/" + this.plugin.rules[i])
            // 		this.close();					
            // 	}).setButtonText("Apply"));
            var ruleset = new obsidian.ButtonComponent(this.contentEl)
                .setButtonText(this.plugin.rules[i])
                .onClick((evt) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.applyRuleset(this.plugin.pathToRulesets + "/" + this.plugin.rules[i]);
                this.close();
            }));
            ruleset.buttonEl.className = "add-ruleset-button";
        }
        var addButton = new obsidian.ButtonComponent(this.contentEl)
            .setButtonText("+")
            .onClick((evt) => __awaiter(this, void 0, void 0, function* () {
            new NewRuleset(this.app, this.plugin).open();
        }));
        addButton.buttonEl.className = "add-ruleset-button";
        addButton.buttonEl.style.setProperty("width", "3.3em");
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}
class NewRuleset extends obsidian.Modal {
    constructor(app, plugin) {
        super(app);
        this.plugin = plugin;
        this.contentEl.className = "ruleset-creation-content";
    }
    onOpen() {
        var nameHint = this.contentEl.createEl("h4");
        nameHint.innerHTML = "Name";
        this.contentEl.append(nameHint);
        var nameInput = this.contentEl.createEl("textarea");
        nameInput.setAttr("rows", "1");
        nameInput.addEventListener('keydown', (e) => {
            if (e.key === "Enter")
                e.preventDefault();
        });
        this.contentEl.append(nameInput);
        var contentHint = this.contentEl.createEl("h4");
        contentHint.innerHTML = "Content";
        this.contentEl.append(contentHint);
        var contentInput = this.contentEl.createEl("textarea");
        contentInput.style.setProperty("height", "300px");
        this.contentEl.append(contentInput);
        new obsidian.ButtonComponent(this.contentEl)
            .setButtonText("Save")
            .onClick((evt) => __awaiter(this, void 0, void 0, function* () {
            if (!(yield this.plugin.createRuleset(nameInput.value, contentInput.value))) {
                new obsidian.Notice("Failed to create the ruleset! Please check if the file already exist.");
                return;
            }
            this.plugin.menu.onClose();
            this.plugin.menu.onOpen();
            this.close();
        }));
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}

module.exports = RegexPipeline;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm1haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20pIHtcclxuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxyXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcclxuICAgIHJldHVybiB0bztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaWYgKGdbbl0pIGlbbl0gPSBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGEsIGIpIHsgcS5wdXNoKFtuLCB2LCBhLCBiXSkgPiAxIHx8IHJlc3VtZShuLCB2KTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XHJcbiAgICB2YXIgaSwgcDtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBuID09PSBcInJldHVyblwiIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59XHJcbiIsImltcG9ydCB7IEFwcCwgQmFzZUNvbXBvbmVudCwgQnV0dG9uQ29tcG9uZW50LCBDb21wb25lbnQsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBUZXh0Q29tcG9uZW50LCBURmlsZSwgVmF1bHQgfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWdleFBpcGVsaW5lIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRydWxlczogc3RyaW5nW11cclxuXHRwYXRoVG9SdWxlc2V0cyA9IHRoaXMuYXBwLnZhdWx0LmNvbmZpZ0RpciArIFwiL3JlZ2V4LXJ1bGVzZXRzXCI7XHJcblx0cGF0aFRvSW5kZXggPSB0aGlzLmFwcC52YXVsdC5jb25maWdEaXIgKyBcIi9yZWdleC1ydWxlc2V0cy9pbmRleC50eHRcIlxyXG5cdG1lbnU6IEFwcGx5UnVsZVNldE1lbnVcclxuXHJcblx0bG9nIChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pXHJcblx0e1xyXG5cdFx0Ly8gY29tbWVudCB0aGlzIHRvIGRpc2FibGUgbG9nZ2luZ1xyXG5cdFx0Y29uc29sZS5sb2coXCJbcmVnZXgtcGlwZWxpbmVdIFwiICsgbWVzc2FnZSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBvbmxvYWQoKSB7XHJcblx0XHR0aGlzLmxvZygnbG9hZGluZycpO1xyXG5cdFx0dGhpcy5tZW51ID0gbmV3IEFwcGx5UnVsZVNldE1lbnUodGhpcy5hcHAsIHRoaXMpXHJcblx0XHR0aGlzLm1lbnUuY29udGVudEVsLmNsYXNzTmFtZSA9IFwicnVsZXNldHMtbWVudS1jb250ZW50XCJcclxuXHRcdHRoaXMubWVudS50aXRsZUVsLmNsYXNzTmFtZSA9IFwicnVsZXNldHMtbWVudS10aXRsZVwiXHJcblxyXG5cdFx0dGhpcy5hZGRSaWJib25JY29uKCdkaWNlJywgJ1JlZ2V4IFJ1bGVzZXRzJywgKCkgPT4ge1xyXG5cdFx0XHR0aGlzLm1lbnUub3BlbigpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0aWQ6ICdhcHBseS1ydWxlc2V0JyxcclxuXHRcdFx0bmFtZTogJ0FwcGx5IFJ1bGVzZXQnLFxyXG5cdFx0XHQvLyBjYWxsYmFjazogKCkgPT4ge1xyXG5cdFx0XHQvLyBcdHRoaXMubG9nKCdTaW1wbGUgQ2FsbGJhY2snKTtcclxuXHRcdFx0Ly8gfSxcclxuXHRcdFx0Y2hlY2tDYWxsYmFjazogKGNoZWNraW5nOiBib29sZWFuKSA9PiB7XHJcblx0XHRcdFx0bGV0IGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZjtcclxuXHRcdFx0XHRpZiAobGVhZikge1xyXG5cdFx0XHRcdFx0aWYgKCFjaGVja2luZykge1xyXG5cdFx0XHRcdFx0XHR0aGlzLm1lbnUub3BlbigpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGhpcy5yZWxvYWRSdWxlc2V0cygpO1xyXG5cdFx0dGhpcy5sb2coXCJSdWxlc2V0czogXCIgKyB0aGlzLnBhdGhUb1J1bGVzZXRzKTtcclxuXHRcdHRoaXMubG9nKFwiSW5kZXg6IFwiICsgdGhpcy5wYXRoVG9JbmRleCk7XHJcblx0fVxyXG5cclxuXHRvbnVubG9hZCgpIHtcclxuXHRcdHRoaXMubG9nKCd1bmxvYWRpbmcnKTtcclxuXHR9XHJcblx0XHJcblx0YXN5bmMgcmVsb2FkUnVsZXNldHMoKSB7XHJcblx0XHRpZiAoIWF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuZXhpc3RzKHRoaXMucGF0aFRvUnVsZXNldHMpKVxyXG5cdFx0XHRhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGVGb2xkZXIodGhpcy5wYXRoVG9SdWxlc2V0cylcclxuXHRcdGlmICghYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5leGlzdHModGhpcy5wYXRoVG9JbmRleCkpXHJcblx0XHRcdGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIud3JpdGUodGhpcy5wYXRoVG9JbmRleCwgXCJcIikuY2F0Y2goKHIpID0+IHtcclxuXHRcdFx0XHRuZXcgTm90aWNlKFwiRmFpbGVkIHRvIHdyaXRlIHRvIGluZGV4IGZpbGU6IFwiICsgcilcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0bGV0IHAgPSB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLnJlYWQodGhpcy5wYXRoVG9JbmRleCk7XHJcblx0XHRwLnRoZW4ocyA9PiB7XHJcblx0XHRcdHRoaXMucnVsZXMgPSBzLnNwbGl0KC9cXHJcXG58XFxyfFxcbi8pO1xyXG5cdFx0XHR0aGlzLnJ1bGVzID0gdGhpcy5ydWxlcy5maWx0ZXIoKHYpID0+IHYubGVuZ3RoID4gMCk7XHJcblx0XHRcdHRoaXMubG9nKHRoaXMucnVsZXMpO1xyXG5cdFx0fSlcclxuXHR9XHJcblxyXG5cdGFzeW5jIGFwcGVuZFJ1bGVzZXRzVG9JbmRleChuYW1lIDogc3RyaW5nKSA6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG5cdFx0dmFyIHJlc3VsdCA6IGJvb2xlYW4gPSB0cnVlXHJcblx0XHR0aGlzLnJ1bGVzLnB1c2gobmFtZSlcclxuXHRcdHZhciBuZXdJbmRleFZhbHVlID0gXCJcIjtcclxuXHRcdHRoaXMucnVsZXMuZm9yRWFjaCgodiwgaSwgYWxsKSA9PiB7XHJcblx0XHRcdG5ld0luZGV4VmFsdWUgKz0gdiArIFwiXFxuXCJcclxuXHRcdH0pXHJcblx0XHRhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLndyaXRlKHRoaXMucGF0aFRvSW5kZXgsIG5ld0luZGV4VmFsdWUpLmNhdGNoKChyKSA9PiB7XHJcblx0XHRcdG5ldyBOb3RpY2UoXCJGYWlsZWQgdG8gd3JpdGUgdG8gaW5kZXggZmlsZTogXCIgKyByKVxyXG5cdFx0XHRyZXN1bHQgPSBmYWxzZTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHRcdFxyXG5cdH1cclxuXHJcblx0YXN5bmMgY3JlYXRlUnVsZXNldCAobmFtZSA6IHN0cmluZywgY29udGVudCA6IHN0cmluZykgOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuXHRcdHZhciByZXN1bHQgOiBib29sZWFuID0gdHJ1ZVxyXG5cdFx0dGhpcy5sb2coXCJjcmVhdGVSdWxlc2V0OiBcIiArIG5hbWUpO1xyXG5cdFx0dmFyIHBhdGggPSB0aGlzLnBhdGhUb1J1bGVzZXRzICsgXCIvXCIgKyBuYW1lO1xyXG5cdFx0aWYgKGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuZXhpc3RzKHBhdGgpKSB7XHJcblx0XHRcdHRoaXMubG9nKFwiZmlsZSBleGlzdGVkOiBcIiArIHBhdGgpO1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0YXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci53cml0ZShwYXRoLCBjb250ZW50KS5jYXRjaCgocikgPT4ge1xyXG5cdFx0XHRuZXcgTm90aWNlKFwiRmFpbGVkIHRvIHdyaXRlIHRoZSBydWxlc2V0IGZpbGU6IFwiICsgcilcclxuXHRcdFx0cmVzdWx0ID0gZmFsc2U7XHJcblx0XHR9KTtcclxuXHJcblx0XHRyZXN1bHQgPSBhd2FpdCB0aGlzLmFwcGVuZFJ1bGVzZXRzVG9JbmRleChuYW1lKVxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRhc3luYyBhcHBseVJ1bGVzZXQgKHJ1bGVzZXQgOiBzdHJpbmcpIHtcclxuXHRcdHRoaXMubG9nKFwiYXBwbHlSdWxlc2V0OiBcIiArIHJ1bGVzZXQpO1xyXG5cdFx0bGV0IHJ1bGVQYXJzZXIgPSAvXlwiKC4rPylcIihbYS16XT8pLT5cIiguKz8pXCIoW2Etel0/KVxcbj8kL2dtdXM7XHRcdFxyXG5cdFx0bGV0IHJ1bGVUZXh0ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5yZWFkKHJ1bGVzZXQpO1xyXG5cclxuXHRcdGxldCBhY3RpdmVNYXJrZG93blZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG5cdFx0aWYgKGFjdGl2ZU1hcmtkb3duVmlldyA9PSBudWxsKVxyXG5cdFx0e1xyXG5cdFx0XHRuZXcgTm90aWNlKFwiTm8gYWN0aXZlIE1hcmtkb3duIGZpbGUhXCIpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IHN1YmplY3Q7XHJcblx0XHRsZXQgc2VsZWN0aW9uTW9kZTtcclxuXHRcdGlmIChhY3RpdmVNYXJrZG93blZpZXcuZWRpdG9yLnNvbWV0aGluZ1NlbGVjdGVkKCkpXHJcblx0XHR7XHJcblx0XHRcdHN1YmplY3QgPSBhY3RpdmVNYXJrZG93blZpZXcuZWRpdG9yLmdldFNlbGVjdGlvbigpO1xyXG5cdFx0XHRzZWxlY3Rpb25Nb2RlID0gdHJ1ZTtcclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0c3ViamVjdCA9IGFjdGl2ZU1hcmtkb3duVmlldy5lZGl0b3IuZ2V0VmFsdWUoKTtcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgY291bnQgPSAwO1xyXG5cdFx0bGV0IHJ1bGVNYXRjaGVzO1xyXG5cdFx0d2hpbGUgKHJ1bGVNYXRjaGVzID0gcnVsZVBhcnNlci5leGVjKHJ1bGVUZXh0KSlcclxuXHRcdHtcclxuXHRcdFx0aWYgKHJ1bGVNYXRjaGVzID09IG51bGwpIGJyZWFrO1xyXG5cdFx0XHR0aGlzLmxvZyhcIlxcblwiICsgcnVsZU1hdGNoZXNbMV0gKyBcIlxcbuKGk+KGk+KGk+KGk+KGk1xcblwiKyBydWxlTWF0Y2hlc1szXSk7XHJcblxyXG5cdFx0XHRsZXQgbWF0Y2hSdWxlID0gcnVsZU1hdGNoZXNbMl0ubGVuZ3RoID09IDA/IG5ldyBSZWdFeHAocnVsZU1hdGNoZXNbMV0sICdnbScpIDogbmV3IFJlZ0V4cChydWxlTWF0Y2hlc1sxXSwgcnVsZU1hdGNoZXNbMl0pO1xyXG5cdFx0XHRpZiAocnVsZU1hdGNoZXNbNF0gPT0gJ3gnKSBzdWJqZWN0ID0gc3ViamVjdC5yZXBsYWNlKG1hdGNoUnVsZSwgJycpO1xyXG5cdFx0XHRlbHNlIHN1YmplY3QgPSBzdWJqZWN0LnJlcGxhY2UobWF0Y2hSdWxlLCBydWxlTWF0Y2hlc1szXSk7XHJcblx0XHRcdGNvdW50Kys7XHJcblx0XHR9XHJcblx0XHRpZiAoc2VsZWN0aW9uTW9kZSlcclxuXHRcdFx0YWN0aXZlTWFya2Rvd25WaWV3LmVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKHN1YmplY3QpO1xyXG5cdFx0ZWxzZSBcclxuXHRcdFx0YWN0aXZlTWFya2Rvd25WaWV3LmVkaXRvci5zZXRWYWx1ZShzdWJqZWN0KTtcclxuXHJcblx0XHRhY3RpdmVNYXJrZG93blZpZXcucmVxdWVzdFNhdmUoKTtcclxuXHRcdG5ldyBOb3RpY2UoXCJBcHBsaWVkIFwiICsgY291bnQgKyBcIiByZWdleCByZXBsYWNlbWVudHMhXCIpO1xyXG5cdFx0XHJcblx0fVxyXG59XHJcblxyXG5jbGFzcyBBcHBseVJ1bGVTZXRNZW51IGV4dGVuZHMgTW9kYWwge1xyXG5cdHBsdWdpbjogUmVnZXhQaXBlbGluZTtcclxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBSZWdleFBpcGVsaW5lKSB7XHJcblx0XHRzdXBlcihhcHApO1xyXG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcblx0XHR0aGlzLnRpdGxlRWwuYXBwZW5kKHRoaXMudGl0bGVFbC5jcmVhdGVFbChcImgxXCIsIG51bGwsIGVsID0+IHsgXHJcblx0XHRcdGVsLmlubmVySFRNTCA9IHRoaXMucGx1Z2luLnBhdGhUb1J1bGVzZXRzICsgXCIvLi4uXCI7XHJcblx0XHRcdGVsLnN0eWxlLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKTtcclxuXHRcdFx0ZWwuc3R5bGUuc2V0UHJvcGVydHkoXCJ3aWR0aFwiLCBcIjkyJVwiKTtcclxuXHRcdFx0ZWwuc3R5bGUuc2V0UHJvcGVydHkoXCJtYXgtd2lkdGhcIiwgXCI0ODBweFwiKTtcclxuXHRcdFx0ZWwuc3R5bGUuc2V0UHJvcGVydHkoXCJtYXJnaW5cIiwgXCIxMiAwIDhcIik7XHJcblx0XHR9KSk7XHJcblx0XHQvLyB2YXIgcmVsb2FkQnV0dG9uID0gbmV3IEJ1dHRvbkNvbXBvbmVudCh0aGlzLnRpdGxlRWwpXHJcblx0XHQvLyBcdC5zZXRCdXR0b25UZXh0KFwiUkVMT0FEXCIpXHJcblx0XHQvLyBcdC5vbkNsaWNrKGFzeW5jIChldnQpID0+IHtcclxuXHRcdC8vIFx0XHR0aGlzLnBsdWdpbi5yZWxvYWRSdWxlc2V0cygpO1xyXG5cdFx0Ly8gXHRcdHRoaXMub25DbG9zZSgpO1xyXG5cdFx0Ly8gXHRcdHRoaXMub25PcGVuKCk7XHJcblx0XHQvLyBcdH0pO1xyXG5cdFx0Ly8gcmVsb2FkQnV0dG9uLmJ1dHRvbkVsLnN0eWxlLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKVxyXG5cdFx0Ly8gcmVsb2FkQnV0dG9uLmJ1dHRvbkVsLnN0eWxlLnNldFByb3BlcnR5KFwiZmxvYXRcIiwgXCJyaWdodFwiKVxyXG5cdFx0Ly8gcmVsb2FkQnV0dG9uLmJ1dHRvbkVsLnN0eWxlLnNldFByb3BlcnR5KFwiYm90dG9tXCIsIFwiOHB4XCIpXHJcblx0XHQvLyByZWxvYWRCdXR0b24uYnV0dG9uRWwuc3R5bGUuc2V0UHJvcGVydHkoXCJtYXJnaW5cIiwgXCJhdXRvXCIpXHJcblx0fVxyXG5cclxuXHRvbk9wZW4oKSB7XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGx1Z2luLnJ1bGVzLmxlbmd0aDsgaSsrKVxyXG5cdFx0e1xyXG5cdFx0XHQvLyBuZXcgU2V0dGluZyhjb250ZW50RWwpXHJcblx0XHRcdC8vIFx0LnNldE5hbWUodGhpcy5wbHVnaW4ucnVsZXNbaV0pXHJcblx0XHRcdC8vIFx0LmFkZEJ1dHRvbihidG4gPT4gYnRuLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xyXG5cdFx0XHQvLyBcdFx0dGhpcy5wbHVnaW4uYXBwbHlSdWxlc2V0KHRoaXMucGx1Z2luLnBhdGhUb1J1bGVzZXRzICsgXCIvXCIgKyB0aGlzLnBsdWdpbi5ydWxlc1tpXSlcclxuXHRcdFx0Ly8gXHRcdHRoaXMuY2xvc2UoKTtcdFx0XHRcdFx0XHJcblx0XHRcdC8vIFx0fSkuc2V0QnV0dG9uVGV4dChcIkFwcGx5XCIpKTtcclxuXHRcdFx0dmFyIHJ1bGVzZXQgPSBuZXcgQnV0dG9uQ29tcG9uZW50KHRoaXMuY29udGVudEVsKVxyXG5cdFx0XHRcdC5zZXRCdXR0b25UZXh0KHRoaXMucGx1Z2luLnJ1bGVzW2ldKVxyXG5cdFx0XHRcdC5vbkNsaWNrKGFzeW5jIChldnQpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMucGx1Z2luLmFwcGx5UnVsZXNldCh0aGlzLnBsdWdpbi5wYXRoVG9SdWxlc2V0cyArIFwiL1wiICsgdGhpcy5wbHVnaW4ucnVsZXNbaV0pXHJcblx0XHRcdFx0XHR0aGlzLmNsb3NlKCk7XHRcdFx0XHRcdFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRydWxlc2V0LmJ1dHRvbkVsLmNsYXNzTmFtZSA9IFwiYWRkLXJ1bGVzZXQtYnV0dG9uXCI7XHJcblx0XHR9XHJcblx0XHR2YXIgYWRkQnV0dG9uID0gbmV3IEJ1dHRvbkNvbXBvbmVudCh0aGlzLmNvbnRlbnRFbClcclxuXHRcdFx0LnNldEJ1dHRvblRleHQoXCIrXCIpXHJcblx0XHRcdC5vbkNsaWNrKGFzeW5jIChldnQpID0+IHtcclxuXHRcdFx0XHRuZXcgTmV3UnVsZXNldCh0aGlzLmFwcCwgdGhpcy5wbHVnaW4pLm9wZW4oKTtcclxuXHRcdFx0fSk7XHJcblx0XHRhZGRCdXR0b24uYnV0dG9uRWwuY2xhc3NOYW1lID0gXCJhZGQtcnVsZXNldC1idXR0b25cIjtcclxuXHRcdGFkZEJ1dHRvbi5idXR0b25FbC5zdHlsZS5zZXRQcm9wZXJ0eShcIndpZHRoXCIsIFwiMy4zZW1cIik7XHJcblx0fVxyXG5cclxuXHRvbkNsb3NlKCkge1xyXG5cdFx0bGV0IHtjb250ZW50RWx9ID0gdGhpcztcclxuXHRcdGNvbnRlbnRFbC5lbXB0eSgpO1xyXG5cdH1cclxufVxyXG5cclxuY2xhc3MgTmV3UnVsZXNldCBleHRlbmRzIE1vZGFsIHtcclxuXHJcblx0cGx1Z2luOiBSZWdleFBpcGVsaW5lO1xyXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFJlZ2V4UGlwZWxpbmUpIHtcclxuXHRcdHN1cGVyKGFwcCk7XHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuXHRcdHRoaXMuY29udGVudEVsLmNsYXNzTmFtZSA9IFwicnVsZXNldC1jcmVhdGlvbi1jb250ZW50XCJcclxuXHR9XHJcblxyXG5cdG9uT3BlbigpIHtcclxuXHRcdHZhciBuYW1lSGludCA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwiaDRcIik7XHJcblx0XHRuYW1lSGludC5pbm5lckhUTUwgPSBcIk5hbWVcIjtcclxuXHRcdHRoaXMuY29udGVudEVsLmFwcGVuZChuYW1lSGludCk7XHJcblx0XHR2YXIgbmFtZUlucHV0ID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRWwoXCJ0ZXh0YXJlYVwiKTtcclxuXHRcdG5hbWVJbnB1dC5zZXRBdHRyKFwicm93c1wiLCBcIjFcIik7XHJcblx0XHRuYW1lSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7XHJcblx0XHRcdGlmIChlLmtleSA9PT0gXCJFbnRlclwiKSBlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHQgIH0pO1xyXG5cdFx0dGhpcy5jb250ZW50RWwuYXBwZW5kKG5hbWVJbnB1dCk7XHJcblx0XHR2YXIgY29udGVudEhpbnQgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcImg0XCIpO1xyXG5cdFx0Y29udGVudEhpbnQuaW5uZXJIVE1MID0gXCJDb250ZW50XCI7XHJcblx0XHR0aGlzLmNvbnRlbnRFbC5hcHBlbmQoY29udGVudEhpbnQpO1xyXG5cdFx0dmFyIGNvbnRlbnRJbnB1dCA9IHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwidGV4dGFyZWFcIik7XHJcblx0XHRjb250ZW50SW5wdXQuc3R5bGUuc2V0UHJvcGVydHkoXCJoZWlnaHRcIiwgXCIzMDBweFwiKTtcclxuXHRcdHRoaXMuY29udGVudEVsLmFwcGVuZChjb250ZW50SW5wdXQpO1xyXG5cdFx0dmFyIHNhdmVCdXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KHRoaXMuY29udGVudEVsKVxyXG5cdFx0XHQuc2V0QnV0dG9uVGV4dChcIlNhdmVcIilcclxuXHRcdFx0Lm9uQ2xpY2soYXN5bmMgKGV2dCkgPT4ge1xyXG5cdFx0XHRcdGlmICghYXdhaXQgdGhpcy5wbHVnaW4uY3JlYXRlUnVsZXNldChuYW1lSW5wdXQudmFsdWUsIGNvbnRlbnRJbnB1dC52YWx1ZSkpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0bmV3IE5vdGljZShcIkZhaWxlZCB0byBjcmVhdGUgdGhlIHJ1bGVzZXQhIFBsZWFzZSBjaGVjayBpZiB0aGUgZmlsZSBhbHJlYWR5IGV4aXN0LlwiKTtcclxuXHRcdFx0XHRcdHJldHVyblxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5tZW51Lm9uQ2xvc2UoKTtcclxuXHRcdFx0XHR0aGlzLnBsdWdpbi5tZW51Lm9uT3BlbigpO1xyXG5cdFx0XHRcdHRoaXMuY2xvc2UoKVxyXG5cdFx0XHR9KTtcclxuXHR9XHJcblxyXG5cdG9uQ2xvc2UoKSB7XHJcblx0XHRsZXQge2NvbnRlbnRFbH0gPSB0aGlzO1xyXG5cdFx0Y29udGVudEVsLmVtcHR5KCk7XHJcblx0fVxyXG59Il0sIm5hbWVzIjpbIlBsdWdpbiIsIk5vdGljZSIsIk1hcmtkb3duVmlldyIsIk1vZGFsIiwiQnV0dG9uQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdURBO0FBQ08sU0FBUyxTQUFTLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFO0FBQzdELElBQUksU0FBUyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxLQUFLLFlBQVksQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxVQUFVLE9BQU8sRUFBRSxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0FBQ2hILElBQUksT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsVUFBVSxPQUFPLEVBQUUsTUFBTSxFQUFFO0FBQy9ELFFBQVEsU0FBUyxTQUFTLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFF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
