/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

// global index of pages with associated block references
let pages = [];
/**
 * creates a copy of the pages index for use in building block ref buttons
 *
 * @return  {Page[]}  an array of Page objects
 */
function getPages() {
    return [...pages];
}
/**
 * Iterate markdown files in the value and builds the pages index with references using metadataCache.
 * Completes in ~100ms on a 2000 note vault on first run, and faster on each subsequent run.
 *
 * @param   {App}   app
 *
 * @return  {void}
 */
function indexBlockReferences(app) {
    pages = [];
    const files = app.vault.getMarkdownFiles();
    for (const file of files) {
        const cache = app.metadataCache.getFileCache(file);
        if (cache) {
            buildPagesArray(file, cache);
        }
    }
    buildObjects();
    buildLinksAndEmbeds();
}
/**
 * takes in metadataCache items and associated file and pushes the initial page object into the pages array
 *
 * @param   {EmbedCache[]}       embeds     embeds from metadataCache
 * @param   {LinkCache[]}        links      links from metadataCache
 * @param   {HeadingCache[]}     headings   headings from metadataCache
 * @param   {Record<string,BlockCache>}       blocks     blocks from metadataCache
 * @param   {SectionCache[]}     sections   sections from metadataCache
 * @param   {ListItemCache[]}    listItems  listItems from metadataCache
 * @param   {TFile}            file       current file being processed
 *
 * @return  {void}
 */
function buildPagesArray(file, cache) {
    const { embeds = [], links = [], headings, blocks, sections, listItems, } = cache;
    const blocksArray = blocks &&
        Object.values(blocks).map((block) => ({
            key: block.id,
            pos: block.position.start.line,
            page: file.basename,
            type: "block",
        }));
    const headingsArray = headings &&
        headings.map((header) => ({
            key: header.heading,
            pos: header.position.start.line,
            page: file.basename,
            type: "header",
        }));
    const foundItems = findItems([...embeds, ...links], file);
    const listSections = createListSections(sections, listItems);
    if (foundItems) {
        pages.push({
            items: foundItems,
            headings: headingsArray,
            blocks: blocksArray,
            file,
            sections: listSections,
            cache,
        });
    }
}
/**
 * If the section is of type list, add the list items from the metadataCache to the section object.
 * This makes it easier to iterate a list when building block ref buttons
 *
 * @param   {SectionCache[]}                sections
 * @param   {ListItemCache[]}               listItems
 *
 * @return  {Section[]}                        Array of sections with additional items key
 */
function createListSections(sections, listItems) {
    if (listItems) {
        return sections.map((section) => {
            const items = [];
            if (section.type === "list") {
                listItems.forEach((item) => {
                    if (item.position.start.line >=
                        section.position.start.line &&
                        item.position.start.line <= section.position.end.line) {
                        items.push(Object.assign({ pos: item.position.start.line }, item));
                    }
                });
                const sectionWithItems = Object.assign({ items }, section);
                return sectionWithItems;
            }
            return section;
        });
    }
    return sections;
}
/**
 * Go through every link reference and embed in the vault
 * Add a reference to the link or embed on the associated block avoiding duplicates
 * Do the same for headers
 *
 * @param   {Page[]}  pages  Array of pages from global pages index
 *
 * @return  {void}
 */
function buildObjects() {
    const allLinks = pages.reduce((acc, page) => {
        acc.push(...page.items);
        return acc;
    }, []);
    pages.forEach((page) => {
        allLinks.forEach((link) => {
            page.blocks &&
                page.blocks.forEach((block) => {
                    if (link.type === "block" &&
                        link.id === block.key &&
                        link.page === block.page) {
                        const object = {
                            basename: link.file.basename,
                            path: link.file.path,
                            pos: link.pos,
                        };
                        if (!isEquivalent(block.references, object)) {
                            block.references = block.references
                                ? block.references
                                : new Set();
                            block.references.add(object);
                        }
                    }
                });
            page.headings &&
                page.headings.forEach((heading) => {
                    const needsCleaning = heading.key.match(/[^\w\s\-'‘‘“”]/g);
                    if (needsCleaning) {
                        heading.key = cleanHeader(heading.key);
                    }
                    if (link.type === "heading" &&
                        link.id === heading.key &&
                        link.page === heading.page) {
                        const object = {
                            basename: link.file.basename,
                            path: link.file.path,
                            pos: link.pos,
                        };
                        if (!isEquivalent(heading.references, object)) {
                            heading.references = heading.references
                                ? heading.references
                                : new Set();
                            heading.references.add(object);
                        }
                    }
                });
        });
    });
}
/**
 * Go through every block and heading in the vault
 * Add a reference to the block or heading on the associated link
 *
 * @param   {Page[]}  pages  Array of pages from global pages index
 *
 * @return  {void}
 */
function buildLinksAndEmbeds() {
    const allRefs = pages.reduce((acc, page) => {
        page.blocks && acc.push(...page.blocks);
        page.headings && acc.push(...page.headings);
        return acc;
    }, []);
    pages.forEach((page) => {
        page.items &&
            page.items.forEach((item) => {
                const ref = allRefs.find((ref) => {
                    if (item.type === "heading") {
                        const needsCleaning = ref.key.match(/[^\w\s\-'‘‘“”]/g);
                        if (needsCleaning) {
                            ref.key = cleanHeader(ref.key);
                        }
                        if (ref.key === item.id && ref.page === item.page) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                    else {
                        if (ref.key === item.id && ref.page === item.page) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
                });
                item.reference = ref && Object.assign(Object.assign({}, ref), { type: "link" });
            });
    });
}
/**
 * Creates an array of block-id links and embeds that exist in the vault
 *
 * @param   {EmbedCache[] & LinkCache[]}     items  Array of embeds and links
 * @param   {TFile}  file
 *
 * @return  {EmbedOrLinkItem[]}
 */
function findItems(items, file) {
    const foundItems = [];
    if (items) {
        items.forEach((item) => {
            const pos = item.position.start.line;
            const parsedLink = obsidian.parseLinktext(item.link);
            const page = parsedLink.path || file.path.replace(".md", "");
            const header = parsedLink.subpath;
            const id = header.split("^")[1];
            const embed = item.original.match(/^!/) ? true : false;
            if (id) {
                foundItems.push({
                    id,
                    pos,
                    page,
                    file,
                    type: "block",
                    embed,
                });
            }
            if (header && !id) {
                foundItems.push({
                    id: header.replace("#", ""),
                    pos,
                    page,
                    file,
                    type: "heading",
                    embed,
                });
            }
        });
    }
    return foundItems;
}
/**
 * Utility function to compare an object to a Set of objects.
 * If the object exists in the array returns true
 *
 * @param   {Set}    Reference  Set of objects to compare
 * @param   {Reference}            object     reference to compare
 *
 * @return  {boolean}             true if object exists in Set
 */
function isEquivalent(set, object) {
    let equiv = false;
    set &&
        set.forEach((setObject) => {
            if (setObject.pos === object.pos &&
                setObject.path === object.path) {
                equiv = true;
            }
        });
    return equiv;
}
function cleanHeader(header) {
    return header
        .replace(/[|.]([^\s])/g, " $1")
        .replace(/[^\w\s\-'‘‘“”]/g, "")
        .replace(/\s\s+/g, " ");
}

const DEFAULT_SETTINGS = {
    displayParent: true,
    displayChild: true,
    tableType: "search"
};
let settings = Object.assign({}, DEFAULT_SETTINGS);
const getSettings = () => {
    return Object.assign({}, settings);
};
const updateSettings = (newSettings) => {
    settings = Object.assign(Object.assign({}, settings), newSettings);
    return getSettings();
};
class BlockRefCountSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Block Reference Counter Settings" });
        new obsidian.Setting(containerEl)
            .setName("Display on Parents")
            .setDesc("Display the count of block references on the parent block or header")
            .addToggle((toggle) => {
            toggle.setValue(getSettings().displayParent);
            toggle.onChange((val) => __awaiter(this, void 0, void 0, function* () {
                updateSettings({ displayParent: val });
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Display on Children")
            .setDesc("Display the count of block references on the child reference blocks")
            .addToggle((toggle) => {
            toggle.setValue(getSettings().displayChild);
            toggle.onChange((val) => __awaiter(this, void 0, void 0, function* () {
                updateSettings({ displayChild: val });
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Type of Reference Table")
            .setDesc("Choose what type of table you'd like references displayed as.")
            .addDropdown((dropdown) => {
            const { tableType } = getSettings();
            dropdown.addOption("search", "Search Results Table");
            dropdown.addOption("basic", "Basic Table");
            dropdown.setValue(tableType);
            dropdown.onChange((val) => __awaiter(this, void 0, void 0, function* () {
                updateSettings({ tableType: val });
                yield this.plugin.saveSettings();
            }));
        });
    }
}

/**
 * BlockRefCounter Plugin
 * by shabegom and Murf
 *
 * Iterates through the cache of all notes in a vault and creates an index of block-ids, headings, links referencing a block-id or heading, and embeds
 * Adds a button in Preview view with the count of references found
 * When button is clicked, reveals a table with links to each reference and line reference exists on
 */
class BlockRefCounter extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log("loading plugin: Block Reference Counter");
            yield this.loadSettings();
            this.addSettingTab(new BlockRefCountSettingTab(this.app, this));
            const typingDebounce = obsidian.debounce(() => {
                this.typingIndicator = false;
            }, 1000, true);
            this.registerDomEvent(document, "keyup", () => {
                this.typingIndicator = true;
                typingDebounce();
            });
            const indexDebounce = obsidian.debounce(() => indexBlockReferences(this.app), 5000, true);
            const indexShortDebounce = obsidian.debounce(() => indexBlockReferences(this.app), 500, true);
            const previewDebounce = obsidian.debounce(() => createPreviewView(this.app), 500, true);
            /**
             * Fire the initial indexing only if layoutReady = true
             * and if the metadataCache has been resolved for the first time
             * avoids trying to create an index while obsidian is indexing files
             */
            if (!this.app.workspace.layoutReady) {
                this.resolved = this.app.metadataCache.on("resolved", () => {
                    this.app.metadataCache.offref(this.resolved);
                    indexBlockReferences(this.app);
                    createPreviewView(this.app);
                });
            }
            else {
                indexBlockReferences(this.app);
                createPreviewView(this.app);
            }
            this.registerView("search-ref", (leaf) => {
                if (!this.app.viewRegistry.getViewCreatorByType("search")) {
                    return;
                }
                const newView = this.app.viewRegistry.getViewCreatorByType("search")(leaf);
                newView.getViewType = () => "search-ref";
                return newView;
            });
            /**
             * Event listeners to re-index notes if the cache changes or a note is deleted
             * triggers creation of block ref buttons on the preview view
             */
            this.registerEvent(this.app.metadataCache.on("changed", () => {
                previewDebounce();
                if (!this.typingIndicator) {
                    if (checkForChanges(this.app)) {
                        indexDebounce();
                    }
                }
            }));
            this.registerEvent(this.app.vault.on("delete", () => {
                if (!this.typingIndicator) {
                    if (checkForChanges(this.app)) {
                        indexShortDebounce();
                    }
                }
            }));
            /**
             * Event listeners for layout changes to update the preview view with a block ref count button
             */
            this.registerEvent(this.app.workspace.on("layout-change", () => {
                var _a;
                previewDebounce();
                if (!this.typingIndicator) {
                    if (checkForChanges(this.app)) {
                        indexShortDebounce();
                    }
                }
                const activeLeaf = this.app.workspace.getActiveLeafOfViewType(obsidian.MarkdownView);
                if (activeLeaf) {
                    try {
                        (_a = activeLeaf.previewMode) === null || _a === void 0 ? void 0 : _a.renderer.onRendered(() => {
                            createPreviewView(this.app);
                        });
                    }
                    catch (e) {
                        console.log(e);
                    }
                }
            }));
            this.registerEvent(this.app.workspace.on("active-leaf-change", () => {
                if (!this.typingIndicator) {
                    if (checkForChanges(this.app)) {
                        indexShortDebounce();
                    }
                }
                createPreviewView(this.app);
            }));
            this.registerEvent(this.app.workspace.on("file-open", () => {
                if (!this.typingIndicator) {
                    if (checkForChanges(this.app)) {
                        indexShortDebounce();
                    }
                }
                createPreviewView(this.app);
            }));
            this.registerMarkdownPostProcessor((el, ctx) => {
                const view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                if (view) {
                    const path = view.file.path;
                    const sectionInfo = ctx.getSectionInfo(el);
                    const lineStart = sectionInfo && sectionInfo.lineStart;
                    const page = getPage(path);
                    if (page && lineStart) {
                        processPage(page, this.app, el, lineStart);
                    }
                }
                if (checkForChanges(this.app)) {
                    indexDebounce();
                }
            });
            //This runs only one time at beginning when Obsidian is completely loaded after startup
            this.app.workspace.onLayoutReady(() => {
                unloadSearchViews(this.app);
            });
        });
    }
    onunload() {
        console.log("unloading plugin: Block Reference Counter");
        unloadButtons(this.app);
        unloadSearchViews(this.app);
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            const newSettings = yield this.loadData();
            updateSettings(newSettings);
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(getSettings());
        });
    }
}
/**
 * Finds the sections present in a note's Preview, iterates them and adds references if required
 * This duplicates some of the functionality of onMarkdownPostProcessor, but is fired on layout and leaf changes
 * @param   {App}                   app
 * @return  {void}
 */
function createPreviewView(app) {
    var _a, _b, _c;
    const view = app.workspace.getActiveViewOfType(obsidian.MarkdownView);
    if (!view) {
        return;
    }
    const sourcePath = (_a = view.file) === null || _a === void 0 ? void 0 : _a.path;
    // if previewMode exists and has sections, get the sections
    const elements = (_c = (_b = view.previewMode) === null || _b === void 0 ? void 0 : _b.renderer) === null || _c === void 0 ? void 0 : _c.sections;
    const page = getPage(sourcePath);
    if (page && elements) {
        elements.forEach((section) => {
            processPage(page, app, section.el, section.lineStart);
        });
    }
}
function processPage(page, app, el, start) {
    const settings = getSettings();
    if (page.sections) {
        page.sections.forEach((pageSection) => {
            if (pageSection.position.start.line === start) {
                pageSection.pos = pageSection.position.start.line;
                const type = pageSection === null || pageSection === void 0 ? void 0 : pageSection.type;
                // find embeds because their section.type is paragraph but they need to be processed differently
                const embeds = el.querySelectorAll(".internal-embed");
                const hasEmbed = embeds.length > 0 ? true : false;
                if ((settings.displayParent &&
                    page.blocks &&
                    !hasEmbed &&
                    type === "paragraph") ||
                    type === "list" ||
                    type === "blockquote" ||
                    type === "code") {
                    addBlockReferences(app, el, page.blocks, pageSection);
                }
                if (settings.displayParent &&
                    page.headings &&
                    type === "heading") {
                    addHeaderReferences(app, el, page.headings, pageSection);
                }
                if (settings.displayChild && page.items) {
                    addLinkReferences(app, el, page.items, pageSection, embeds);
                }
            }
        });
    }
}
/**
 * Iterate through the blocks in the note and add a block ref button if the section includes a block-id
 *
 *
 * @param   {App}                      app
 * @param   {HTMLElement}              val      the HTMLElement to attach the button to
 * @param   {Block[]}                  blocks   Array of blocks from pages index
 * @param   {Section}                  section  Section object from pages index
 *
 * @return  {void}
 */
function addBlockReferences(app, val, blocks, section) {
    blocks &&
        blocks.forEach((block) => {
            if (block.key === section.id) {
                if (section.type === "paragraph") {
                    createButtonElement(app, block, val);
                }
                if (section.type === "blockquote" || section.type === "code") {
                    block.type = "link";
                    createButtonElement(app, block, val);
                }
            }
            // Iterate each list item and add the button to items with block-ids
            if (section.type === "list") {
                section.items.forEach((item, index) => {
                    const buttons = val.querySelectorAll("li");
                    if (item.id === block.key) {
                        createButtonElement(app, block, buttons[index]);
                    }
                });
            }
        });
}
/**
 * Iterate through links (includes transcluded embeds) and add a block ref button if the link has an associated block ref
 *
 * @param   {App}                     app
 * @param   {HTMLElement}             val        HTMLElement to attach the button to
 * @param   {EmbedOrLinkItem[]}       links      Array of links and embeds from pages index
 * @param   {Section}                 section    Section object from pages index
 * @param   {HTMLELement}             embedLink  if there is an embedLink it is passed in from createPreviewView
 *
 * @return  {void}
 */
function addLinkReferences(app, val, links, section, embedLinks) {
    links.forEach((link) => {
        if (section.type === "paragraph" && section.pos === link.pos) {
            embedLinks &&
                embedLinks.forEach((embedLink) => {
                    link.reference &&
                        embedLink &&
                        // need to delay a bit until the embed is loaded into the view
                        setTimeout(() => {
                            createButtonElement(app, link.reference, embedLink.firstChild);
                        }, 1);
                });
            if (link.reference && !link.embed) {
                createButtonElement(app, link.reference, val);
            }
        }
        // Have to iterate list items so the button gets attached to the right element
        if (section.type === "list") {
            section.items.forEach((item, index) => {
                const buttons = val.querySelectorAll("li");
                embedLinks &&
                    embedLinks.forEach((embedLink) => {
                        if (link.reference &&
                            embedLink &&
                            item.id === link.reference.key) {
                            setTimeout(() => {
                                createButtonElement(app, link.reference, embedLink.firstChild);
                            }, 1);
                        }
                    });
                if (link.reference && !link.embed && item.pos === link.pos) {
                    // change the type from link to block so createButtonElement adds the button to the right place
                    createButtonElement(app, link.reference, buttons[index]);
                }
            });
        }
    });
}
/**
 * Adds a block ref button to each header that has an associated header link or embed
 *
 * @param   {App}               app
 * @param   {HTMLElement}       val       HTMLElement to attach the button to
 * @param   {Heading[]}         headings  Array of heading objects from pages index
 * @param   {Section}           section   Section object from pages index
 *
 * @return  {void}
 */
function addHeaderReferences(app, val, headings, section) {
    if (headings) {
        headings.forEach((header) => {
            header.pos === section.pos && createButtonElement(app, header, val);
        });
    }
}
/**
 * Add a button with the number of references to the Preview of a note
 *
 * @param   {App}               app
 * @param   {Block | Heading}   block  The block or Heading with references to generate the button for
 * @param   {HTMLElement}       val    The element to attach the button to
 *
 * @return  {void}
 */
function createButtonElement(app, block, val) {
    if (val) {
        const count = block && block.references ? block.references.size : 0;
        const normalizedKey = normalize(block.key);
        const existingButton = val.querySelector("#count");
        const countEl = createEl("button", { cls: "block-ref-count" });
        countEl.setAttribute("data-block-ref-id", block.key);
        countEl.setAttribute("id", "count");
        if (block.type === "link") {
            countEl.addClass("child-ref");
        }
        else {
            countEl.addClass("parent-ref");
        }
        countEl.innerText = count.toString();
        const { tableType } = getSettings();
        if (tableType === "basic") {
            const refs = block.references
                ? Array.from(block.references)
                : undefined;
            const refTable = createTable(app, val, refs);
            countEl.on("click", "button", () => {
                if (!val.children.namedItem("ref-table")) {
                    block.type === "block" && val.appendChild(refTable);
                    block.type === "header" && val.appendChild(refTable);
                    block.type === "link" && val.append(refTable);
                }
                else {
                    if (val.children.namedItem("ref-table")) {
                        val.removeChild(refTable);
                    }
                }
            });
        }
        if (tableType === "search") {
            countEl.on("click", "button", () => __awaiter(this, void 0, void 0, function* () {
                const searchEnabled = app.internalPlugins.getPluginById("global-search").enabled;
                if (!searchEnabled) {
                    new obsidian.Notice("you need to enable the core search plugin");
                }
                else {
                    const tempLeaf = app.workspace.getRightLeaf(false);
                    //Hide the leaf/pane so it doesn't show up in the right sidebar
                    tempLeaf.tabHeaderEl.hide();
                    const blockKeyEsc = regexEscape(block.key);
                    const blockPageEsc = regexEscape(block.page);
                    const blockKeyClean = cleanHeader(block.key);
                    yield tempLeaf.setViewState({
                        type: "search-ref",
                        state: {
                            query: `(file:("${blockPageEsc}.md") (/ \\^${blockKeyEsc}$/ OR /#\\^${blockKeyEsc}(\\]\\]|\\|.*\\]\\])/ OR /#+ ${blockKeyEsc}$/ OR /\\[\\[#${blockKeyClean}(\\]\\]|\\|.*\\]\\])/)) OR /\\[\\[${blockPageEsc}#\\^${blockKeyEsc}(\\]\\]|\\|.*\\]\\])/ OR /\\[\\[${blockPageEsc}#${blockKeyClean}(\\]\\]|\\|.*\\]\\])/`,
                        },
                    });
                    const search = app.workspace.getLeavesOfType("search-ref");
                    const searchElement = createSearchElement(app, search, block);
                    let searchHeight;
                    if (count === 1) {
                        searchHeight = 225;
                    }
                    else if (count === 2) {
                        searchHeight = 250;
                    }
                    else {
                        searchHeight = (count + 1) * 85;
                        if (searchHeight < 300) {
                            searchHeight = 300;
                        }
                        else if (searchHeight > 600) {
                            searchHeight = 600;
                        }
                    }
                    searchElement.setAttribute("style", "height: " + searchHeight + "px;");
                    if (!val.children.namedItem("search-ref")) {
                        search[search.length - 1].view.searchQuery;
                        // depending on the type of block the search view needs to be inserted into the DOM at different points
                        block.type === "block" && val.appendChild(searchElement);
                        block.type === "header" &&
                            val.appendChild(searchElement);
                        block.type === "link" && val.append(searchElement);
                    }
                    else {
                        if (val.children.namedItem("search-ref")) {
                            app.workspace
                                .getLeavesOfType("search-ref")
                                .forEach((leaf) => {
                                const container = leaf.view.containerEl;
                                const dataKey = `[data-block-ref-id='${normalizedKey}']`;
                                const key = container.parentElement.querySelector(dataKey);
                                if (key) {
                                    leaf.detach();
                                }
                            });
                        }
                    }
                }
            }));
        }
        if (existingButton) {
            existingButton.remove();
        }
        count > 0 && val.prepend(countEl);
    }
}
function createSearchElement(app, search, block) {
    const searchElement = search[search.length - 1].view.containerEl;
    const normalizedKey = normalize(block.key);
    searchElement.setAttribute("data-block-ref-id", normalizedKey);
    const toolbar = searchElement.querySelector(".nav-buttons-container");
    const closeButton = createEl("button", {
        cls: "search-input-clear-button",
    });
    closeButton.on("click", "button", () => {
        app.workspace.getLeavesOfType("search-ref").forEach((leaf) => {
            const container = leaf.view.containerEl;
            const dataKey = `[data-block-ref-id='${normalizedKey}']`;
            const key = container.parentElement.querySelector(dataKey);
            if (key) {
                leaf.detach();
            }
        });
    });
    toolbar.append(closeButton);
    searchElement.setAttribute("id", "search-ref");
    return searchElement;
}
function createTable(app, val, refs) {
    const refTable = createEl("table", { cls: "ref-table" });
    refTable.setAttribute("id", "ref-table");
    const noteHeaderRow = createEl("tr").createEl("th", { text: "Note" });
    const lineHeaderRow = createEl("tr").createEl("th", {
        text: "Reference",
        cls: "reference",
    });
    const removeTable = createEl("button", { text: "x" });
    removeTable.addClass("table-close");
    lineHeaderRow.appendChild(removeTable);
    removeTable.on("click", "button", () => {
        val.removeChild(refTable);
    });
    refTable.appendChild(noteHeaderRow);
    refTable.appendChild(lineHeaderRow);
    refTable.appendChild(removeTable);
    refs &&
        refs.forEach((ref) => __awaiter(this, void 0, void 0, function* () {
            const file = (yield app.vault.getAbstractFileByPath(ref.path));
            const lineContent = yield app.vault
                .cachedRead(file)
                .then((content) => content.split("\n")[ref.pos]);
            const row = createEl("tr");
            const noteCell = createEl("td");
            const lineCell = createEl("td");
            noteCell.createEl("a", {
                cls: "internal-link",
                href: ref.path,
                text: ref.basename,
            });
            lineCell.createEl("span", { text: lineContent });
            row.appendChild(noteCell);
            row.appendChild(lineCell);
            refTable.appendChild(row);
        }));
    return refTable;
}
/**
 * if there are block reference buttons in the current view, remove them
 * used when the plugin is unloaded
 *
 * @param   {App}  app
 *
 * @return  {void}
 */
function unloadButtons(app) {
    let buttons;
    const activeLeaf = app.workspace.getActiveViewOfType(obsidian.MarkdownView);
    if (activeLeaf) {
        buttons = activeLeaf.containerEl.querySelectorAll("#count");
    }
    buttons && buttons.forEach((button) => button.remove());
}
function unloadSearchViews(app) {
    app.workspace
        .getLeavesOfType("search-ref")
        .forEach((leaf) => leaf.detach());
}
function regexEscape(regexString) {
    return regexString.replace(/(\[|\]|\^|\*|\||\(|\)|\.)/g, "\\$1");
}
//utility function to fetch a specific page from the index
function getPage(sourcePath) {
    const pages = getPages();
    return (pages[0] &&
        getPages().reduce((acc, page) => {
            if (page.file.path === sourcePath) {
                acc = page;
            }
            return acc;
        }));
}
//get the current active page and compare the cache to what is in the index
function checkForChanges(app) {
    const activeView = app.workspace.getActiveViewOfType(obsidian.MarkdownView);
    if (activeView) {
        const activePage = getPage(activeView.file.path);
        if (activePage) {
            const currentCache = app.metadataCache.getFileCache(activeView.file);
            if (currentCache) {
                const { links, headings, blocks, embeds } = currentCache;
                if (!isEqual(activePage.cache.links, links) ||
                    !isEqual(activePage.cache.headings, headings) ||
                    !isEqual(activePage.cache.blocks, blocks) ||
                    !isEqual(activePage.cache.embeds, embeds)) {
                    return true;
                }
            }
        }
        return false;
    }
}
const normalize = (str) => {
    return str.replace(/\s+|'/g, "").toLowerCase();
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const isEqual = (a, b) => {
    if (a === b)
        return true;
    if (a == null || b == null)
        return false;
    if (a.constructor !== b.constructor)
        return false;
    const keys = Object.keys(a);
    const length = keys.length;
    if (length !== Object.keys(b).length)
        return false;
    for (let i = 0; i < length; i++) {
        if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
            return false;
        if (a[keys[i]] === b[keys[i]] || isEqual(a[keys[i]], b[keys[i]]))
            return true;
    }
    return true;
};

module.exports = BlockRefCounter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
